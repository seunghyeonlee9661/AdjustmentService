plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.2'
    id 'io.spring.dependency-management' version '1.1.6'
}

group = 'com.sparta.module'
version = '0.0.1-USER-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    developmentOnly {
        extendsFrom runtimeOnly
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    // jwt
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'
    //Swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'
    // 메일 보내는 기능
    implementation 'org.springframework.boot:spring-boot-starter-mail'
}

tasks.named('test') {
    useJUnitPlatform()
}

jar {
    archiveBaseName.set('adjustment')  // JAR 파일의 이름
    archiveVersion.set(version)         // 버전
    archiveFileName.set("adjustment-${version}.jar") // 최종 JAR 파일 이름
    manifest {
        attributes(
                'Main-Class': 'com.sparta.adjustment.UserServiceApplication'  // 여기에 메인 클래스의 패키지와 클래스 이름을 입력하세요
        )
    }
    // 모든 의존성을 포함
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    // 중복 항목 처리 전략 추가
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}